<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Panuon.WPF.UI"
                    xmlns:core="clr-namespace:Panuon.WPF;assembly=Panuon.WPF"
                    xmlns:i="clr-namespace:Panuon.WPF.UI.Internal"
                    xmlns:rs="clr-namespace:Panuon.WPF.UI.Resources"
                    xmlns:irs="clr-namespace:Panuon.WPF.UI.Internal.Resources">
    <ResourceDictionary.MergedDictionaries>
        <core:SharedResourceDictionary Source="pack://application:,,,/Panuon.WPF.UI;component/Resources/Converters.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <ControlTemplate x:Key="{x:Static irs:TemplateKeys.ExpanderUpDownTemplate}"
                     TargetType="Expander">
        <local:ContentControlX x:Name="CcMain"
                           Background="{TemplateBinding Background}"
                           BorderBrush="{TemplateBinding BorderBrush}"
                           BorderThickness="{TemplateBinding BorderThickness}"
                           Foreground="{TemplateBinding Foreground}"
                           Source="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                           CornerRadius="{Binding Path=(local:ExpanderHelper.CornerRadius), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                           Effect="{Binding Path=(i:VisualStateHelper.Effect), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                           VerticalContentAlignment="Stretch"
                           HorizontalContentAlignment="Stretch">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <ToggleButton x:Name="TgbHeader"
                              Focusable="{TemplateBinding Focusable}"
                              Height="{Binding Path=(local:ExpanderHelper.HeaderHeight), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                              BorderBrush="{Binding Path=(local:ExpanderHelper.HeaderBorderBrush), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                              BorderThickness="{Binding Path=(local:ExpanderHelper.HeaderBorderThickness), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                              Background="{Binding Path=(local:ExpanderHelper.HeaderBackground), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                              Foreground="{Binding Path=(local:ExpanderHelper.HeaderForeground), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                              FontSize="{Binding Path=(local:ExpanderHelper.HeaderFontSize), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                              FontFamily="{Binding Path=(local:ExpanderHelper.HeaderFontFamily), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                              IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                              VerticalContentAlignment="{Binding Path=(local:ExpanderHelper.HeaderVerticalContentAlignment), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                              HorizontalContentAlignment="{Binding Path=(local:ExpanderHelper.HeaderHorizontalContentAlignment), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                    <ToggleButton.Style>
                        <Style TargetType="ToggleButton">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="ToggleButton">
                                        <Border BorderBrush="{TemplateBinding BorderBrush}"
                                                BorderThickness="{TemplateBinding BorderThickness}"
                                                Background="{TemplateBinding Background}">
                                            <ContentPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ToggleButton.Style>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <local:TransformControl x:Name="TcTransform"
                                                Margin="8,0,0,0"
                                                Style="{Binding Path=(local:ExpanderHelper.ToggleArrowTransformControlStyle), RelativeSource={RelativeSource AncestorType=Expander}, Mode=OneWay}" />
                        <local:ContentControlX x:Name="CcHeader"
                                               Grid.Column="1"
                                               Source="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                               Icon="{Binding Path=(local:ExpanderHelper.Icon), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                                               Padding="{Binding Path=(local:ExpanderHelper.HeaderPadding), RelativeSource={RelativeSource AncestorType=Expander}, Mode=OneWay}"
                                               Content="{TemplateBinding Header}"
                                               ContentTemplate="{TemplateBinding HeaderTemplate}"
                                               ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                               ContentStringFormat="{TemplateBinding HeaderStringFormat}" />
                        <ContentControl Grid.Column="2"
                                        Focusable="False"
                                        Content="{Binding Path=(local:ExpanderHelper.ExtendControl), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                    </Grid>
                </ToggleButton>
                <Rectangle x:Name="RectSeparator"
                           Grid.Row="1"
                           Fill="{Binding Path=(local:ExpanderHelper.HeaderSeparatorBrush), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                           Height="{Binding Path=(local:ExpanderHelper.HeaderSeparatorThickness), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                           Margin="{Binding Path=(local:ExpanderHelper.HeaderSeparatorMargin), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                           Visibility="{Binding Path=(local:ExpanderHelper.HeaderSeparatorVisibility), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                <Border x:Name="PART_ContentBorder"
                        Grid.Row="2"
                        Visibility="Collapsed">
                    <ContentPresenter Margin="{TemplateBinding Padding}" />
                </Border>
            </Grid>
        </local:ContentControlX>
        <ControlTemplate.Triggers>
            <Trigger Property="ExpandDirection"
                     Value="Down">
                <Setter TargetName="TgbHeader"
                        Property="Grid.Row"
                        Value="0" />
                <Setter TargetName="RectSeparator"
                        Property="Grid.Row"
                        Value="1" />
            </Trigger>
            <Trigger Property="ExpandDirection"
                     Value="Up">
                <Setter TargetName="TgbHeader"
                        Property="Grid.Row"
                        Value="4" />
                <Setter TargetName="RectSeparator"
                        Property="Grid.Row"
                        Value="3" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsExpanded, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                    <Condition Binding="{Binding Path=(local:ExpanderHelper.ExpandedBackground), Converter={StaticResource {x:Static rs:ConverterKeys.IsNonnullConverter}}, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="CcMain"
                        Property="Background"
                        Value="{Binding Path=(local:ExpanderHelper.ExpandedBackground), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsExpanded, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                    <Condition Binding="{Binding Path=(local:ExpanderHelper.ExpandedBorderBrush), Converter={StaticResource {x:Static rs:ConverterKeys.IsNonnullConverter}}, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="CcMain"
                        Property="BorderBrush"
                        Value="{Binding Path=(local:ExpanderHelper.ExpandedBorderBrush), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsExpanded, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                    <Condition Binding="{Binding Path=(local:ExpanderHelper.ExpandedHeaderBackground), Converter={StaticResource {x:Static rs:ConverterKeys.IsNonnullConverter}}, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="TgbHeader"
                        Property="Background"
                        Value="{Binding Path=(local:ExpanderHelper.ExpandedHeaderBackground), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsExpanded, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                    <Condition Binding="{Binding Path=(local:ExpanderHelper.ExpandedHeaderForeground), Converter={StaticResource {x:Static rs:ConverterKeys.IsNonnullConverter}}, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="TgbHeader"
                        Property="Foreground"
                        Value="{Binding Path=(local:ExpanderHelper.ExpandedHeaderForeground), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                <Setter TargetName="CcHeader"
                        Property="Foreground"
                        Value="{Binding Path=(local:ExpanderHelper.ExpandedHeaderForeground), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                <Setter TargetName="CcHeader"
                        Property="IconForeground"
                        Value="{Binding Path=(local:ExpanderHelper.ExpandedHeaderForeground), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsExpanded, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                    <Condition Binding="{Binding Path=(local:ExpanderHelper.ExpandedHeaderBorderBrush), Converter={StaticResource {x:Static rs:ConverterKeys.IsNonnullConverter}}, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="TgbHeader"
                        Property="BorderBrush"
                        Value="{Binding Path=(local:ExpanderHelper.ExpandedHeaderBorderBrush), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsExpanded, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                    <Condition Binding="{Binding Path=(local:ExpanderHelper.ExpandedHeaderBorderThickness), Converter={StaticResource {x:Static rs:ConverterKeys.IsNonnullConverter}}, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="TgbHeader"
                        Property="BorderThickness"
                        Value="{Binding Path=(local:ExpanderHelper.ExpandedHeaderBorderThickness), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
            </MultiDataTrigger>
            <Trigger Property="local:ExpanderHelper.ToggleArrowPlacement"
                     Value="Right">
                <Setter TargetName="TcTransform"
                        Property="Grid.Column"
                        Value="3" />
                <Setter TargetName="TcTransform"
                        Property="Margin"
                        Value="0,0,8,0" />
            </Trigger>
            <Trigger Property="IsExpanded"
                     Value="True">
                <Setter TargetName="RectSeparator"
                        Property="Visibility"
                        Value="{Binding Path=(local:ExpanderHelper.HeaderSeparatorVisibility), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                <Setter  TargetName="PART_ContentBorder"
                         Property="Visibility"
                         Value="Visible" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{x:Static irs:TemplateKeys.ExpanderLeftRightTemplate}"
                     TargetType="Expander">
        <local:ContentControlX x:Name="CcMain"
                           Background="{TemplateBinding Background}"
                           BorderBrush="{TemplateBinding BorderBrush}"
                           BorderThickness="{TemplateBinding BorderThickness}"
                           Foreground="{TemplateBinding Foreground}"
                           Source="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                           CornerRadius="{Binding Path=(local:ExpanderHelper.CornerRadius), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                           Effect="{Binding Path=(i:VisualStateHelper.Effect), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                           VerticalContentAlignment="Stretch"
                           HorizontalContentAlignment="Stretch">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <ToggleButton x:Name="TgbHeader"
                              Focusable="{TemplateBinding Focusable}"
                              Width="{Binding Path=(local:ExpanderHelper.HeaderHeight), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                              Background="{Binding Path=(local:ExpanderHelper.HeaderBackground), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                              Foreground="{Binding Path=(local:ExpanderHelper.HeaderForeground), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                              FontSize="{Binding Path=(local:ExpanderHelper.HeaderFontSize), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                              FontWeight="{Binding Path=(local:ExpanderHelper.HeaderFontWeight), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                              FontFamily="{Binding Path=(local:ExpanderHelper.HeaderFontFamily), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                              IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                              VerticalContentAlignment="{Binding Path=(local:ExpanderHelper.HeaderVerticalContentAlignment), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                              HorizontalContentAlignment="{Binding Path=(local:ExpanderHelper.HeaderHorizontalContentAlignment), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                    <ToggleButton.Style>
                        <Style TargetType="ToggleButton">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="ToggleButton">
                                        <Border Background="{TemplateBinding Background}">
                                            <ContentPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ToggleButton.Style>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <local:TransformControl x:Name="TcTransform"
                                                Focusable="False"
                                                Margin="0,8,0,0"
                                                Style="{Binding Path=(local:ExpanderHelper.ToggleArrowTransformControlStyle), RelativeSource={RelativeSource AncestorType=Expander}, Mode=OneWay}" />
                        <local:ContentControlX x:Name="CcHeader"
                                               Grid.Row="1"
                                               Source="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                               Icon="{Binding Path=(local:ExpanderHelper.Icon), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                                               Padding="{Binding Path=(local:ExpanderHelper.HeaderPadding), RelativeSource={RelativeSource AncestorType=Expander}, Mode=OneWay}"
                                               Content="{TemplateBinding Header}"
                                               ContentTemplate="{TemplateBinding HeaderTemplate}"
                                               ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                               ContentStringFormat="{TemplateBinding HeaderStringFormat}" />
                        <ContentControl Grid.Row="2"
                                        Focusable="False"
                                        Content="{Binding Path=(local:ExpanderHelper.ExtendControl), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                    </Grid>
                </ToggleButton>
                <Rectangle x:Name="RectSeparator"
                           Grid.Column="1"
                           Fill="{Binding Path=(local:ExpanderHelper.HeaderSeparatorBrush), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                           Width="{Binding Path=(local:ExpanderHelper.HeaderSeparatorThickness), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                           Margin="{Binding Path=(local:ExpanderHelper.HeaderSeparatorMargin), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                           Visibility="{Binding Path=(local:ExpanderHelper.HeaderSeparatorVisibility), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                <Border x:Name="PART_ContentBorder"
                        Grid.Column="2"
                        Visibility="Collapsed">
                    <ContentPresenter Margin="{TemplateBinding Padding}" />
                </Border>
            </Grid>
        </local:ContentControlX>
        <ControlTemplate.Triggers>
            <Trigger Property="ExpandDirection"
                     Value="Right">
                <Setter TargetName="TgbHeader"
                        Property="Grid.Column"
                        Value="0" />
                <Setter TargetName="RectSeparator"
                        Property="Grid.Column"
                        Value="1" />
            </Trigger>
            <Trigger Property="ExpandDirection"
                     Value="Left">
                <Setter TargetName="TgbHeader"
                        Property="Grid.Column"
                        Value="4" />
                <Setter TargetName="RectSeparator"
                        Property="Grid.Column"
                        Value="3" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsExpanded, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                    <Condition Binding="{Binding Path=(local:ExpanderHelper.ExpandedBackground), Converter={StaticResource {x:Static rs:ConverterKeys.IsNonnullConverter}}, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="CcMain"
                        Property="Background"
                        Value="{Binding Path=(local:ExpanderHelper.ExpandedBackground), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsExpanded, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                    <Condition Binding="{Binding Path=(local:ExpanderHelper.ExpandedBorderBrush), Converter={StaticResource {x:Static rs:ConverterKeys.IsNonnullConverter}}, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="CcMain"
                        Property="BorderBrush"
                        Value="{Binding Path=(local:ExpanderHelper.ExpandedBorderBrush), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsExpanded, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                    <Condition Binding="{Binding Path=(local:ExpanderHelper.ExpandedHeaderBackground), Converter={StaticResource {x:Static rs:ConverterKeys.IsNonnullConverter}}, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="TgbHeader"
                        Property="Background"
                        Value="{Binding Path=(local:ExpanderHelper.ExpandedHeaderBackground), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsExpanded, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                    <Condition Binding="{Binding Path=(local:ExpanderHelper.ExpandedHeaderForeground), Converter={StaticResource {x:Static rs:ConverterKeys.IsNonnullConverter}}, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="TgbHeader"
                        Property="Foreground"
                        Value="{Binding Path=(local:ExpanderHelper.ExpandedHeaderForeground), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                <Setter TargetName="CcHeader"
                        Property="Foreground"
                        Value="{Binding Path=(local:ExpanderHelper.ExpandedHeaderForeground), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                <Setter TargetName="CcHeader"
                        Property="IconForeground"
                        Value="{Binding Path=(local:ExpanderHelper.ExpandedHeaderForeground), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
            </MultiDataTrigger>
            <Trigger Property="local:ExpanderHelper.ToggleArrowPlacement"
                     Value="Right">
                <Setter TargetName="TcTransform"
                        Property="Grid.Row"
                        Value="3" />
                <Setter TargetName="TcTransform"
                        Property="Margin"
                        Value="0,0,0,8" />
            </Trigger>
            <Trigger Property="IsExpanded"
                     Value="True">
                <Setter TargetName="RectSeparator"
                        Property="Visibility"
                        Value="{Binding Path=(local:ExpanderHelper.HeaderSeparatorVisibility), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                <Setter  TargetName="PART_ContentBorder"
                         Property="Visibility"
                         Value="Visible" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

</ResourceDictionary>
